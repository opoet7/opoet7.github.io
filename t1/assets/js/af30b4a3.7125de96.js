"use strict";(self.webpackChunktaymaz_docs=self.webpackChunktaymaz_docs||[]).push([[4423],{8393:t=>{t.exports=JSON.parse('{"blogPosts":[{"id":"/tcpdump","metadata":{"permalink":"/t1/blog/tcpdump","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/tcpdump.md","source":"@site/blog/tcpdump.md","title":"Tcpdump","description":"Tcpdump is a commandline tool that is used to dump traffic on a network. This","date":"2023-07-25T09:37:31.680Z","formattedDate":"\u06f3 \u0645\u0631\u062f\u0627\u062f \u06f1\u06f4\u06f0\u06f2","tags":[],"readingTime":3.595,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"nextItem":{"title":"Welcome","permalink":"/t1/blog/welcome"}},"content":"Tcpdump is a commandline tool that is used to dump traffic on a network. This\\ntool comes in hand when you want to analyse network captures within the\\ncommand line. Basically it can do most of the wireshark job.\\n\\n**NOTE** This guide might not be complete it just serve as a reference to me.\\n\\nAdditional Note & Reference\\n==============================\\n\\nTo be fair: This gist is itself a fork I created some time ago, but the original gist \\nor author seems to not exist anymore, and it looks like that I\'m now in the lead ;-)\\nPlease see the revision history for details.\\n\\nFurthermore some more and basic advanced examples may be of interest (thanks to twitter://@howtouselinux1):\\n- [Tcpdump Cheat Sheet (Basic Advanced Examples)](https://howtouselinux.com/post/tcpdump-cheat-sheet)\\n\\n\\nOptions\\n=======\\nThe following are some of options that I prefer when using `tcpdump` for my\\ndaily use.\\n\\ntcpdump [OPTIONS]\\n```shell\\n-i any : Listen to all the interfaces\\n-i virbr0: Listen to a specific interface virbr0\\n-D: Show the list of available interface\\n-n: Don\'t resolve the hostnames\\n-nn: Don\'t resolve hostnames or port names.\\n-q: quite output\\n-t: Don\'t print a timestamp on each dump line.\\n-tttt: Give maximally human-readbale timestamp output\\n-X: Show the packet\'s contents in both HEX ad ASCII\\n-XX: Same as -X but shows the ethernet header.\\n-v, -vv, -vvv: Being more verbose(increase number of packet information)\\n-c: Only capture number of packets and stop\\n-s: Define the snaplength(size) of the capture in bytes. Use -s0 to get\\neverything.\\n-S: Print absolute sequence numbers.\\n-e: Get the ethernet header as well\\n-E: Decrypt IPSEC traffic by providing an encryption key.\\n```\\n### Expressions\\n`tcpdump` allow us to use expression so we can narrow down our solution to get\\nexactly what we\'re looking for.\\n\\nThere are 3 types of expression: `type`, `dir` and `proto`\\n\\n+ Type options are: `host`,`net`, and `port`\\n+ Direction are: `src` and `dst`\\n+ Protocol : `tcp`,`udp`,`icmp`,`ah` etc\\n\\n### Examples\\n1. Basic communication to see what happens on the network\\n\\n        $ tcpdump -i any\\n        \\n2. Monitor specific interface\\n\\n        $ tcpdump -i virbr0\\n\\n3. Raw output view with verbose output,no host/port resolution,absolute sequence number and\\n   human-readable timestamps.\\n\\n        $ tcpdump -ttttnnvvS\\n\\n4. Find traffic by IP\\n        \\n        $ tcpdump host 192.168.122.131\\n\\n5. Seeing packets with HEX output\\n        \\n        $ tcpdump -nnvXSs 0 -c1 icmp\\n\\n6. Filtering by Source and Destination\\n\\n        $ tcpdump src 192.168.122.131\\n        $ tcpdump dst 192.168.122.14\\n\\n7. Finding packets by network\\n        \\n        $ tcpdump net 192.168.122.0/24\\n\\n8. Show traffic related to a specific port\\n\\n        $ tcpdump port 3389\\n\\n9. Show traffic of one protocol\\n\\n        $ tcpdump icmp\\n\\n10. Show only IPv6 Traffic\\n\\n        $ tcpdump ip6\\n\\n11. Find traffic using Port ranges\\n\\n        $ tcpdump portrange 21-25\\n\\n12. Find traffic base on packet size\\n        \\n        $ tcpdump less 32\\n\\n        $ tcpdump greater 32\\n\\n        $ tcpdump <= 102\\n\\n13. Writing captures to a file\\n\\n        $ tcpdump port 80 -w output\\n\\n14. Reading from pcap files\\n\\n        $ tcpdump -r output.pcap\\n\\n### More Examples\\n1. Options Combination\\n   + AND : `and` or `&&`\\n   + OR : `or` or `||`\\n   + EXCEPT : `not` or `!`\\n\\n    ```\\n    $ tcpdump -nnvvS src 192.168.122.1 and dst port 4444\\n    ```\\n\\n2. Complex grouping and special characters\\n   For complex grouping we use `()` to specify our options\\n\\n    ```\\n    $ tcpdump \'src 192.168.122.84 and (dst port 4444 or 22)\'\\n    ```\\n\\n3. Isolating Specific TCP Flags. The filter `tcp[13]` look at offset 13 in `TCP HEADER`,hence the number\\n   represent the location within the byte, while the `!=0` means that the flag\\n   is set to 1.\\\\\\n   Show all URGENT (URG) packets\\\\\\n\\n        $ tcpdump \'tcp[13] & 32!=0\'\\n   Show all ACKNOWLEDGE( ACK) packets\\\\\\n        \\n        $ tcpdump \'tcp[13] & 16!=0\'\\n   Show all PUSH (PSH) packets\\\\\\n        \\n        $ tcpdump \'tcp[13] & 8!=0\'\\n   Show all RESET (RST packets\\\\\\n        \\n        $ tcpdump \'tcp[13] & 4!=0\'\\n   Show all SYNCHRONIZE (SYN) packets\\\\\\n        \\n        $ tcpdump \'tcp[13] & 2!=0\'\\n   Show all FINISH (FIN) packets\\\\\\n        \\n        $ tcpdump \'tcp[13] & 1!=0\'\\n   Show all SYNCRONIZE/ACKNOWLEDGE (SYNACK) packets\\\\\\n        \\n        $ tcpdump \'tcp[13]=18\'\\n   Alternative we could also use `tcpflags` syntax\\n\\n        $ tcpdump \'tcp[tcpflags] == tcp-syn\'\\n        $ tcpdump \'tcp[tcpflags] == tcp-rst\'\\n        $ tcpdump \'tcp[tcpflags] == tcp-fin\'\\n\\n4. Identifying malformed/malicious packets.\\n   + Packets with both rst and syn flags shouldn\'t be the case.\\n        \\n            $ tcpdump \'tcp=[13] = 6\'\\n   + Find cleartext http get requests\\n\\n            $ tcpdump \'tcp[32:4] = 0x47455420\'\\n   + Find ssh connection on any port via (banner text)\\n        \\n            $ # tcpdump \'tcp[(tcp[12]>>2):4] = 0x5353482D\'"},{"id":"welcome","metadata":{"permalink":"/t1/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/index.md","source":"@site/blog/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2023-07-25T09:27:38.219Z","formattedDate":"\u06f3 \u0645\u0631\u062f\u0627\u062f \u06f1\u06f4\u06f0\u06f2","tags":[{"label":"facebook","permalink":"/t1/blog/tags/facebook"},{"label":"hello","permalink":"/t1/blog/tags/hello"},{"label":"docusaurus","permalink":"/t1/blog/tags/docusaurus"}],"readingTime":0.395,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["slorber","yangshun"],"tags":["facebook","hello","docusaurus"]},"prevItem":{"title":"Tcpdump","permalink":"/t1/blog/tcpdump"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\n\\nSimply add Markdown files (or folders) to the `blog` directory.\\n\\nRegular blog authors can be added to `authors.yml`.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."}]}')}}]);